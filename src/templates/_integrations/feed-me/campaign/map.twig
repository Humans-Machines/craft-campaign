{% import '_includes/forms' as forms %}

{% set fields = [{
    name: 'Title',
    handle: 'title',
}, {
    name: 'Slug',
    handle: 'slug',
    instructions: 'If not set, the Slug will be automatically created from Title.'|t('feed-me'),
}] %}

<h2>{{ 'Campaign Fields'|t('campaign') }}</h2>

<table class="feedme-mapping data fullwidth collapsible">
    <thead>
        <th>{{ 'Field'|t('feed-me') }}</th>
        <th>{{ 'Feed Element'|t('feed-me') }}</th>
        <th>{{ 'Default Value'|t('feed-me') }}</th>
    </thead>
    <tbody>
        {% for field in fields %}
            {% set template = field.type ?? 'default' %}
            {% set variables = field|merge({ feed: feed, feedData: feedData, attribute: true }) %}

            {% include 'feed-me/_includes/fields/' ~ template ignore missing with variables only %}
        {% endfor %}
    </tbody>
</table>

{% set campaignTypeId = feed.elementGroup[feed.elementType].campaignTypeId %}
{% set campaignType = craft.campaign.getCampaignTypeById(campaignTypeId) %}
{% set tabs = campaignType.fieldLayout.tabs %}

{% if campaignType %}

    {% for tab in tabs %}
        <hr>

        <h2>{{ tab.name }} Fields</h2>

        <table class="feedme-mapping data fullwidth collapsible">
            <thead>
                <th>{{ 'Field'|t('feed-me') }}</th>
                <th>{{ 'Feed Element'|t('feed-me') }}</th>
                <th>{{ 'Default Value'|t('feed-me') }}</th>
            </thead>
            <tbody>
                {% for layoutField in tab.getElements() %}
                    {% if layoutField is instance of('craft\\fieldlayoutelements\\CustomField') %}
                        {% set field = layoutField.getField() %}
                        {% set fieldClass = craft.feedme.fields.getRegisteredField(className(field)) %}
                        {% set template = fieldClass.getMappingTemplate() %}
                        {% set variables = {
                            name: field.name,
                            handle: field.handle,
                            feed: feed,
                            feedData:feedData,
                            fieldClass: fieldClass,
                            field: field,
                        } %}
                        {% include template ignore missing with variables only %}
                    {% endif %}
                {% endfor %}
            </tbody>
        </table>
    {% endfor %}
{% endif %}

<hr>

<h2 id="entry-uniques-label">{{ "Set a unique identifier to match against existing elements"|t('feed-me') }}</h2>
<p>{{ "Select the fields you want to use to check for existing elements. When selected, Feed Me will look for existing elements that match the fields provided below and either update, or skip depending on your choice of Import Strategy."|t('feed-me') }}</p>

{% for tab in tabs %}
    {% for layoutField in tab.getElements()|filter(e => e is instance of('craft\\fieldlayoutelements\\CustomField')) %}
        {% set field = layoutField.getField() %}
        {% set fields = fields|merge([{ name: field.name, handle: field.handle, type: className(field) }]) %}
    {% endfor %}
{% endfor %}

<fieldset class="feedme-uniques" aria-labelledby="entry-uniques-label">
    {% for field in fields %}
        {% if field and craft.feedme.fieldCanBeUniqueId(field) %}
            {{ forms.checkboxField({
                name: 'fieldUnique[' ~ field.handle ~ ']',
                label: field.name,
                checked: feed.fieldUnique[field.handle] ?? '',
            }) }}
        {% endif %}
    {% endfor %}
</fieldset>
